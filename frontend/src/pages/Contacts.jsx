import { useLocation } from "react-router-dom";
import { useState, useRef, useEffect } from "react";
import { createLead } from "../api/leads.js";

function IconPhone() {
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M6.6 10.8c1.2 2.4 3.2 4.4 5.6 5.6l1.9-1.9a1 1 0 0 1 1.05-.24c1.15.38 2.39.59 3.65.59a1 1 0 0 1 1 1V19a2 2 0 0 1-2 2C10.28 21 3 13.72 3 4a2 2 0 0 1 2-2h2.15a1 1 0 0 1 1 1c0 1.26.21 2.5.59 3.65a1 1 0 0 1-.24 1.05L6.6 10.8Z" stroke="currentColor" strokeWidth="1.5"/>
    </svg>
  );
}
function IconMail() {
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M4 6h16a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1Zm0 0 8 6 8-6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  );
}
function IconUser() {
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5Zm0 2c-4.418 0-8 2.239-8 5v1h16v-1c0-2.761-3.582-5-8-5Z" stroke="currentColor" strokeWidth="1.5"/>
    </svg>
  );
}
function IconTelegram() {
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M21 3 3.5 10.2c-.6.24-.59 1.1.01 1.33l4.54 1.77 1.76 4.54c.23.6 1.09.61 1.33.01L18 3" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  );
}
function IconClock() {
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M12 7v5l4 2M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  );
}
function IconSelect() {
  return (
    <svg className="field__icon" style={{right: 10, left: "auto"}} viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M6 9l6 6 6-6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  );
}

export default function Contacts() {
  const location = useLocation();
  const preselected = location?.state?.selectedPackage || "";

  const [form, setForm] = useState({
    name: "",
    phone: "",
    email: "",
    telegram: "",
    audience: "",
    preferred_time: "",
    comment: preselected ? `–¶—ñ–∫–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç: ${preselected}` : "",
  });
  const [sending, setSending] = useState(false);
  const [result, setResult] = useState(null);
  const statusRef = useRef(null);

  function onChange(e) {
    const { name, value } = e.target;
    setForm((s) => ({ ...s, [name]: value }));
  }

  async function onSubmit(e) {
    e.preventDefault();

    if (!form.name.trim()) {
      alert("–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–º‚Äô—è");
      return;
    }
    const hasAnyContact =
      (form.phone && form.phone.trim()) ||
      (form.telegram && form.telegram.trim()) ||
      (form.email && form.email.trim());

    if (!hasAnyContact) {
      alert("–í–∫–∞–∂—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∞–±–æ email.");
      return;
    }

    setSending(true);
    setResult(null);
    try {
      const payload = {
        kind: "trial",
        name: form.name.trim(),
        phone: form.phone || undefined,
        telegram: form.telegram || undefined,
        email: form.email || undefined,
        audience: form.audience || undefined,
        preferred_time: form.preferred_time || undefined,
        comment: form.comment || undefined,
        source: "site",
      };
      const data = await createLead(payload);
      setResult({ ok: true, id: data?.id });
      setForm({
        name: "",
        phone: "",
        email: "",
        telegram: "",
        audience: "",
        preferred_time: "",
        comment: "",
      });
    } catch (err) {
      console.error(err);
      setResult({ ok: false, error: err?.response?.data?.detail || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏" });
    } finally {
      setSending(false);
      // –ø—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –¥–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –º–æ–±—ñ–ª–æ–∫
      setTimeout(() => statusRef.current?.scrollIntoView({ behavior: "smooth", block: "center" }), 50);
    }
  }

  useEffect(() => {
    // –§—ñ–∫—Å: —è–∫—â–æ –ø—Ä–∏–π—à–ª–∏ –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ —Ç–∞—Ä–∏—Ñ—É ‚Äî –ø—ñ–¥—Å–≤—ñ—Ç–∏–º–æ –∫–æ–º–µ–Ω—Ç–∞—Ä —ñ —Ñ–æ–∫—É—Å–Ω–µ–º–æ —ñ–º'—è
    if (preselected && !form.comment) {
      setForm((s) => ({ ...s, comment: `–¶—ñ–∫–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç: ${preselected}` }));
    }
    // eslint-disable-next-line
  }, []);

  return (
    <section className="contact">
      <div className="container contact__inner">
        <header className="contact__head">
          <h1 className="section-title">
            –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ –ë–ï–ó–ö–û–®–¢–û–í–ù–ò–ô –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó üí¨
          </h1>
          <p className="section-subtitle">
            –î—ñ–∑–Ω–∞–π—Å—è —Å–≤—ñ–π —Ä—ñ–≤–µ–Ω—å —ñ –æ—Ç—Ä–∏–º–∞–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞–≤—á–∞–Ω–Ω—è ‚Äî
            –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ —Ç–∞ –±–µ–∑ –∑–æ–±–æ–≤‚Äô—è–∑–∞–Ω—å.
          </p>
          <p className="contact__hint">
            –í–∫–∞–∂–∏ <strong>—Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–æ—Å—ñ–± –∑–≤‚Äô—è–∑–∫—É</strong> (—Ç–µ–ª–µ—Ñ–æ–Ω / Telegram / email).
            –Ü–Ω—à—ñ –ø–æ–ª—è ‚Äî –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º.
          </p>

          <div className="contact__badges">
            <span className="badge">‚úÖ –ì–∞—Ä–∞–Ω—Ç—ñ—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É</span>
            <span className="badge">üéØ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞</span>
            <span className="badge">üåç –û–Ω–ª–∞–π–Ω –∑ –±—É–¥—å-—è–∫–æ—ó —Ç–æ—á–∫–∏</span>
          </div>
        </header>

        <div className="contact__grid">
          {/* FORM */}
          <form className="form card" onSubmit={onSubmit} noValidate>
            <div className="form__row">
              <label className="field">
                <span className="field__label">–Ü–º‚Äô—è *</span>
                <span className="input-wrap">
                  <IconUser />
                  <input
                    className="field__input"
                    name="name"
                    value={form.name}
                    onChange={onChange}
                    placeholder="–í–∞—à–µ —ñ–º‚Äô—è"
                    required
                    autoComplete="name"
                  />
                </span>
              </label>

              <label className="field">
                <span className="field__label">–¢–µ–ª–µ—Ñ–æ–Ω</span>
                <span className="input-wrap">
                  <IconPhone />
                  <input
                    className="field__input"
                    name="phone"
                    value={form.phone}
                    onChange={onChange}
                    placeholder="+380..."
                    autoComplete="tel"
                    inputMode="tel"
                  />
                </span>
                <span className="help">–ú–æ–∂–Ω–∞ –∑–∞–ª–∏—à–∏—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ —Ç—ñ–ª—å–∫–∏ Telegram/email</span>
              </label>
            </div>

            <div className="form__row">
              <label className="field">
                <span className="field__label">Email</span>
                <span className="input-wrap">
                  <IconMail />
                  <input
                    className="field__input"
                    type="email"
                    name="email"
                    value={form.email}
                    onChange={onChange}
                    placeholder="name@example.com"
                    autoComplete="email"
                  />
                </span>
              </label>

              <label className="field">
                <span className="field__label">Telegram</span>
                <span className="input-wrap">
                  <IconTelegram />
                  <input
                    className="field__input"
                    name="telegram"
                    value={form.telegram}
                    onChange={onChange}
                    placeholder="@username"
                  />
                </span>
              </label>
            </div>

            <div className="form__row">
              <label className="field">
                <span className="field__label">–ê—É–¥–∏—Ç–æ—Ä—ñ—è</span>
                <span className="input-wrap">
                  <IconSelect />
                  <select
                    className="field__select"
                    name="audience"
                    value={form.audience}
                    onChange={onChange}
                    aria-label="–û–±–µ—Ä—ñ—Ç—å –∞—É–¥–∏—Ç–æ—Ä—ñ—é"
                  >
                    <option value="">–û–±—Ä–∞—Ç–∏...</option>
                    <option value="kids">–î—ñ—Ç–∏</option>
                    <option value="adults">–î–æ—Ä–æ—Å–ª—ñ</option>
                  </select>
                </span>
              </label>

              <label className="field">
                <span className="field__label">–ó—Ä—É—á–Ω–∏–π —á–∞—Å</span>
                <span className="input-wrap">
                  <IconClock />
                  <input
                    className="field__input"
                    name="preferred_time"
                    value={form.preferred_time}
                    onChange={onChange}
                    placeholder="–ë—É–¥–Ω—ñ 18:00‚Äì20:00"
                  />
                </span>
              </label>
            </div>

            <label className="field">
              <span className="field__label">–ö–æ–º–µ–Ω—Ç–∞—Ä</span>
              <textarea
                className="field__textarea"
                name="comment"
                value={form.comment}
                onChange={onChange}
                rows={4}
                placeholder="–ü–æ–±–∞–∂–∞–Ω–Ω—è —â–æ–¥–æ –≥—Ä–∞—Ñ—ñ–∫—É, —Ü—ñ–ª–µ–π –∞–±–æ –≤–∏–∫–ª–∞–¥–∞—á–∞"
              />
            </label>

            <div className="form__footer">
              <div className="form__note">
                –ù–∞—Ç–∏—Å–∫–∞—é—á–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å¬ª, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å —ñ–∑ —É–º–æ–≤–∞–º–∏ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö.
              </div>
              <button className="btn btn-cta" type="submit" disabled={sending}>
                {sending ? "–ù–∞–¥—Å–∏–ª–∞—î–º–æ..." : "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫"}
              </button>
            </div>

            <p
              ref={statusRef}
              className={result?.ok ? "form__success" : result ? "form__error" : "sr-only"}
              role="status"
              aria-live="polite"
            >
              {result?.ok
                ? "–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ ‚Äî –º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                : result
                ? `–ü–æ–º–∏–ª–∫–∞: ${result.error}`
                : ""}
            </p>
          </form>

          {/* ASIDE */}
          <aside className="contact__aside">
            <div className="contact__card card">
              <h3>–ö–æ–Ω—Ç–∞–∫—Ç–∏</h3>
              <ul className="contact__list">
                <li><a href="tel:+380991797047">+38 (099) 179-70-47</a></li>
                <li>
                  <a href="https://t.me/IvanKozhevnyk" target="_blank" rel="noreferrer">
                    Telegram
                  </a>
                </li>
              </ul>
              <button
                className="btn btn-ghost"
                onClick={() => window.tidioChatApi?.open?.()}
                type="button"
              >
                –ù–∞–ø–∏—Å–∞—Ç–∏ —É —á–∞—Ç
              </button>
            </div>

            <div className="contact__card card">
              <h3>–Ø–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫</h3>
              <ol className="contact__steps">
                <li>–ö–æ—Ä–æ—Ç–∫–∏–π –¥–∑–≤—ñ–Ω–æ–∫ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–æ–º (—Ü—ñ–ª—ñ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫).</li>
                <li>–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä—ñ–≤–Ω—è —ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω –Ω–∞–≤—á–∞–Ω–Ω—è.</li>
                <li>–ü—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫ 30‚Äì60 —Ö–≤ + —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.</li>
              </ol>
            </div>
          </aside>
        </div>
      </div>
    </section>
  );
}
