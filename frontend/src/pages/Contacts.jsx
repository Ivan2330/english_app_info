import { useLocation } from "react-router-dom";
import { useState, useEffect } from "react";
import { createLead } from "../api/leads.js";
import contactHero from "../assets/hero/contact-hero.webp";

/* ===== helpers ===== */
function useIsMobile(breakpoint = 768) {
  const [isMobile, setIsMobile] = useState(
    typeof window !== "undefined" ? window.matchMedia(`(max-width:${breakpoint}px)`).matches : false
  );
  useEffect(() => {
    if (typeof window === "undefined") return;
    const mql = window.matchMedia(`(max-width:${breakpoint}px)`);
    const onChange = (e) => setIsMobile(e.matches);
    mql.addEventListener?.("change", onChange);
    mql.addListener?.(onChange); // Safari fallback
    return () => {
      mql.removeEventListener?.("change", onChange);
      mql.removeListener?.(onChange);
    };
  }, [breakpoint]);
  return isMobile;
}

/* ===== icons ===== */
function IconPhone(){return(<svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M6.6 10.8c1.2 2.4 3.2 4.4 5.6 5.6l1.9-1.9a1 1 0 0 1 1.05-.24c1.15.38 2.39.59 3.65.59a1 1 0 0 1 1 1V19a2 2 0 0 1-2 2C10.28 21 3 13.72 3 4a2 2 0 0 1 2-2h2.15a1 1 0 0 1 1 1c0 1.26.21 2.5.59 3.65a1 1 0 0 1-.24 1.05L6.6 10.8Z" stroke="currentColor" strokeWidth="1.5"/></svg>);}
function IconMail(){return(<svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M4 6h16a1 1 0 0 1 1 1v10a1 1 0 0 1-1 1H4a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1Zm0 0 8 6 8-6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>);}
function IconUser(){return(<svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5Zm0 2c-4.418 0-8 2.239-8 5v1h16v-1c0-2.761-3.582-5-8-5Z" stroke="currentColor" strokeWidth="1.5"/></svg>);}
function IconTelegram(){return(<svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M21 3 3.5 10.2c-.6.24-.59 1.1.01 1.33l4.54 1.77 1.76 4.54c.23.6 1.09.61 1.33.01L18 3" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>);}
function IconClock(){return(<svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M12 7v5l4 2M21 12a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>);}
function IconSelect(){return(<svg className="field__icon caret" viewBox="0 0 24 24" fill="none" aria-hidden="true"><path d="M6 9l6 6 6-6" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/></svg>);}

export default function Contacts() {
  const location = useLocation();
  const preselected = location?.state?.selectedPackage || "";
  const isMobile = useIsMobile(768); // <-- –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞—Ö –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —Ñ–æ—Ç–æ

  const [form, setForm] = useState({
    name: "", phone: "", email: "", telegram: "",
    audience: "", preferred_time: "",
    comment: preselected ? `–¶—ñ–∫–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç: ${preselected}` : "",
  });
  const [sending, setSending] = useState(false);
  const [result, setResult] = useState(null);

  function onChange(e){
    const { name, value } = e.target;
    setForm(s => ({ ...s, [name]: value }));
  }

  async function onSubmit(e){
    e.preventDefault();
    if(!form.name.trim()) { alert("–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–º‚Äô—è"); return; }
    const hasAnyContact = (form.phone?.trim() || form.telegram?.trim() || form.email?.trim());
    if(!hasAnyContact){ alert("–í–∫–∞–∂—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω, Telegram –∞–±–æ email."); return; }

    setSending(true); setResult(null);
    try{
      const payload = {
        kind:"trial",
        name: form.name.trim(),
        phone: form.phone || undefined,
        telegram: form.telegram || undefined,
        email: form.email || undefined,
        audience: form.audience || undefined,
        preferred_time: form.preferred_time || undefined,
        comment: form.comment || undefined,
        source:"site",
      };
      const data = await createLead(payload);
      setResult({ ok:true, id:data?.id });
      setForm({ name:"", phone:"", email:"", telegram:"", audience:"", preferred_time:"", comment:"" });
    } catch(err){
      console.error(err);
      setResult({ ok:false, error: err?.response?.data?.detail || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏" });
    } finally { setSending(false); }
  }

  useEffect(()=>{
    if(preselected && !form.comment){
      setForm(s=>({ ...s, comment:`–¶—ñ–∫–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç: ${preselected}` }));
    }
    // eslint-disable-next-line
  },[]);

  return (
    <section className="contact">
      <div className="container contact__inner">

        <header className="contact__head contact__head--span">
          <p className="kicker">Prime Academy</p>
          <h1 className="section-title">–ó–∞–ø–∏—Å –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫</h1>
          <p className="section-subtitle">
            30‚Äì60 —Ö–≤–∏–ª–∏–Ω –∑ –≤–∏–∫–ª–∞–¥–∞—á–µ–º –ø–æ –≤—ñ–¥–µ–æ–∑–≤‚Äô—è–∑–∫—É: –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä—ñ–≤–Ω—è —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.
          </p>
          <p className="contact__hint">
            –í–∫–∞–∂–∏ <strong>—Ö–æ—á–∞ –± –æ–¥–∏–Ω —Å–ø–æ—Å—ñ–± –∑–≤‚Äô—è–∑–∫—É</strong> (—Ç–µ–ª–µ—Ñ–æ–Ω / Telegram / email). –Ü–Ω—à—ñ –ø–æ–ª—è ‚Äî –∑–∞ –±–∞–∂–∞–Ω–Ω—è–º.
          </p>
        </header>

        <div className={`combo card ${isMobile ? "combo--formOnly" : ""}`}>
          {/* left: form */}
          <form className="form form--combo" onSubmit={onSubmit} noValidate>
            <div className="form__row">
              <label className="field">
                <span className="field__label">–Ü–º‚Äô—è *</span>
                <span className="input-wrap">
                  <IconUser />
                  <input className="field__input" name="name" value={form.name}
                    onChange={onChange} placeholder="–í–∞—à–µ —ñ–º‚Äô—è" required autoComplete="name" />
                </span>
              </label>

              <label className="field">
                <span className="field__label">–¢–µ–ª–µ—Ñ–æ–Ω</span>
                <span className="input-wrap">
                  <IconPhone />
                  <input className="field__input" name="phone" value={form.phone}
                    onChange={onChange} placeholder="–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É" autoComplete="tel" inputMode="tel" />
                </span>
              </label>
            </div>

            <div className="form__row">
              <label className="field">
                <span className="field__label">Email</span>
                <span className="input-wrap">
                  <IconMail />
                  <input className="field__input" type="email" name="email" value={form.email}
                    onChange={onChange} placeholder="name@example.com" autoComplete="email" />
                </span>
              </label>

              <label className="field">
                <span className="field__label">Telegram</span>
                <span className="input-wrap">
                  <IconTelegram />
                  <input className="field__input" name="telegram" value={form.telegram}
                    onChange={onChange} placeholder="@username" />
                </span>
              </label>
            </div>

            <div className="form__row">
              <label className="field">
                <span className="field__label">–ê—É–¥–∏—Ç–æ—Ä—ñ—è</span>
                <span className="input-wrap">
                  <IconSelect />
                  <select className="field__select" name="audience" value={form.audience} onChange={onChange}>
                    <option value="">–û–±—Ä–∞—Ç–∏...</option>
                    <option value="kids">–î—ñ—Ç–∏</option>
                    <option value="adults">–î–æ—Ä–æ—Å–ª—ñ</option>
                  </select>
                </span>
              </label>

              <label className="field">
                <span className="field__label">–ó—Ä—É—á–Ω–∏–π —á–∞—Å</span>
                <span className="input-wrap">
                  <IconClock />
                  <input className="field__input" name="preferred_time" value={form.preferred_time}
                    onChange={onChange} placeholder="–ë—É–¥–Ω—ñ 18:00‚Äì20:00" />
                </span>
              </label>
            </div>

            <label className="field">
              <span className="field__label">–ö–æ–º–µ–Ω—Ç–∞—Ä</span>
              <textarea className="field__textarea" name="comment" value={form.comment}
                onChange={onChange} rows={4}
                placeholder="–ü–æ–±–∞–∂–∞–Ω–Ω—è —â–æ–¥–æ –≥—Ä–∞—Ñ—ñ–∫—É, —Ü—ñ–ª–µ–π –∞–±–æ –≤–∏–∫–ª–∞–¥–∞—á–∞" />
            </label>

            <div className="form__footer">
              <div className="form__note">–ù–∞—Ç–∏—Å–∫–∞—é—á–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å¬ª, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å —ñ–∑ —É–º–æ–≤–∞–º–∏ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö.</div>
              <button className="btn btn-cta" type="submit" disabled={sending}>
                {sending ? "–ù–∞–¥—Å–∏–ª–∞—î–º–æ..." : "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫"}
              </button>
            </div>

            <p className={result?.ok ? "form__success" : result ? "form__error" : "sr-only"} role="status" aria-live="polite">
              {result?.ok ? "–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ ‚Äî –º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                          : result ? `–ü–æ–º–∏–ª–∫–∞: ${result.error}` : ""}
            </p>
          </form>

          {/* right: photo ‚Äî –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –Ω–∞ –º–æ–±–∞–π–ª—ñ */}
          {!isMobile && (
            <aside className="visual">
              <div className="visual__media">
                <img
                  src={contactHero}
                  alt="–°—Ç—É–¥–µ–Ω—Ç–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω-—É—Ä–æ—Ü—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó"
                  className="visual__img"
                  loading="lazy"
                />
                <div className="visual__fadeLeft" aria-hidden="true"></div>
                <div className="visual__badges"></div>
              </div>
            </aside>
          )}
        </div>
      </div>
    </section>
  );
}
