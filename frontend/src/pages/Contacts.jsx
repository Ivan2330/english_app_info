import { useLocation } from "react-router-dom";
import { useState, useEffect, useRef } from "react";
import { createLead } from "../api/leads.js";


/* ===== Icons ===== */
function IconUser(){
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M12 12a5 5 0 1 0-5-5 5 5 0 0 0 5 5Zm0 2c-4.418 0-8 2.239-8 5v1h16v-1c0-2.761-3.582-5-8-5Z" stroke="currentColor" strokeWidth="1.5"/>
    </svg>
  );
}
function IconPhone(){
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M6.6 10.8c1.2 2.4 3.2 4.4 5.6 5.6l1.9-1.9a1 1 0 0 1 1.05-.24c1.15.38 2.39.59 3.65.59a1 1 0 0 1 1 1V19a2 2 0 0 1-2 2C10.28 21 3 13.72 3 4a2 2 0 0 1 2-2h2.15a1 1 0 0 1 1 1c0 1.26.21 2.5.59 3.65a1 1 0 0 1-.24 1.05L6.6 10.8Z" stroke="currentColor" strokeWidth="1.5"/>
    </svg>
  );
}
function IconAt(){
  return (
    <svg className="field__icon" viewBox="0 0 24 24" fill="none" aria-hidden="true">
      <path d="M12 20a8 8 0 1 1 6.32-3.1M15 13.5a3 3 0 1 1-3-3h.5a2.5 2.5 0 0 1 2.5 2.5v2a1.5 1.5 0 0 0 3 0V12" stroke="currentColor" strokeWidth="1.5" strokeLinecap="round" strokeLinejoin="round"/>
    </svg>
  );
}

/* ===== Helpers ===== */
function parseContact(raw){
  const v = (raw||"").trim();
  if(!v) return { email: undefined, telegram: undefined };
  // –î—É–∂–µ –ø—Ä–æ—Å—Ç–∞ –µ–≤—Ä–∏—Å—Ç–∏–∫–∞:
  if(v.includes("@") && v.includes(".")) return { email: v, telegram: undefined };
  if(v.startsWith("@")) return { email: undefined, telegram: v };
  return { email: undefined, telegram: v }; // —è–∫—â–æ –Ω–µ —Å—Ö–æ–∂–µ –Ω–∞ email ‚Äî —Ç—Ä–∞–∫—Ç—É—î–º–æ —è–∫ Telegram
}

export default function Contacts(){
  const location = useLocation();
  const preselected = location?.state?.selectedPackage || "";
  const formRef = useRef(null);

  const [form, setForm] = useState({
    name: "",
    phone: "",
    contact: "", // —É–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–µ –ø–æ–ª–µ: Telegram –∞–±–æ email
  });
  const [sending, setSending] = useState(false);
  const [result, setResult] = useState(null);

  useEffect(()=>{ setResult(null); }, [form.name, form.phone, form.contact]);

  function onChange(e){
    const { name, value } = e.target;
    setForm(s => ({ ...s, [name]: value }));
  }

  function scrollToForm(e){
    e?.preventDefault?.();
    const el = formRef.current;
    if(!el) return;
    el.scrollIntoView({ behavior: "smooth", block: "start" });
  }

  async function onSubmit(e){
    e.preventDefault();
    if(!form.name.trim()){
      alert("–í–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —ñ–º‚Äô—è");
      return;
    }
    if(!(form.phone?.trim() || form.contact?.trim())){
      alert("–í–∫–∞–∂—ñ—Ç—å —Ö–æ—á–∞ –± –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç: —Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ Telegram/email.");
      return;
    }

    const { email, telegram } = parseContact(form.contact);

    setSending(true); setResult(null);
    try{
      const payload = {
        kind: "trial",
        name: form.name.trim(),
        phone: form.phone?.trim() || undefined,
        email,
        telegram,
        comment: preselected ? `–¶—ñ–∫–∞–≤–∏—Ç—å –ø–∞–∫–µ—Ç: ${preselected}` : undefined,
        source: "site",
      };
      const data = await createLead(payload);
      setResult({ ok:true, id:data?.id });
      setForm({ name:"", phone:"", contact:"" });
    } catch(err){
      console.error(err);
      setResult({ ok:false, error: err?.response?.data?.detail || "–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏" });
    } finally { setSending(false); }
  }

  return (
    <section className="contact">
      <div className="container contact__inner">

        <header className="contact__head contact__head--span">
          <p className="kicker">Prime Academy</p>
          <h1 className="section-title">–ó–∞–ø–∏—Å –Ω–∞ –±–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∏–π –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫</h1>
          <p className="section-subtitle">
            30‚Äì60 —Ö–≤–∏–ª–∏–Ω —ñ–∑ –≤–∏–∫–ª–∞–¥–∞—á–µ–º –ø–æ –≤—ñ–¥–µ–æ–∑–≤‚Äô—è–∑–∫—É: –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ä—ñ–≤–Ω—è —Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∏–π –ø–ª–∞–Ω.
          </p>
          <p className="contact__hint">
            –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –∑–∞–π–º–∞—î ~10 —Å–µ–∫—É–Ω–¥. <strong>–ü–æ—Ç—Ä—ñ–±–Ω–æ –ª–∏—à–µ —ñ–º‚Äô—è —Ç–∞ –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç.</strong>
          </p>

          {/* Mobile ribbon */}
          <div className="promo-ribbon" aria-live="polite">
            <strong>–î–æ 20.10</strong> ‚Äî –∑–∞—Ñ—ñ–∫—Å—É–π—Ç–µ –∞–∫—Ü—ñ–π–Ω—É —Ü—ñ–Ω—É: <b>400/375/340/320 –≥—Ä–Ω</b>
            <span className="promo-ribbon__sub">–¥–æ–¥–∞—Ç–∫–æ–≤–æ –¥–æ –ø–æ—Ç–æ—á–Ω–∏—Ö –∑–Ω–∏–∂–æ–∫ —É –ø–∞–∫–µ—Ç–∞—Ö</span>
          </div>
        </header>

        <div className="combo">
          {/* ===== PROMO (–∑–∞–º—ñ—Å—Ç—å —Ñ–æ—Ç–æ) ===== */}
          <aside className="promo card">
            <div className="promo__head">
              <span className="badge-deadline">üîî –ê–∫—Ü—ñ—è –¥—ñ—î –¥–æ 20 –∂–æ–≤—Ç–Ω—è</span>
              <h3 className="promo__title">–ó–∞—Ñ—ñ–∫—Å—É–π—Ç–µ –∞–∫—Ü—ñ–π–Ω—ñ —Ü—ñ–Ω–∏ –Ω–∞ –∂–æ–≤—Ç–Ω–µ–≤–∏–π –Ω–∞–±—ñ—Ä</h3>
              <p className="promo__subtitle">
                –î–æ–¥–∞—Ç–∫–æ–≤—ñ –∑–Ω–∏–∂–∫–∏ <strong>–ø–æ–Ω–∞–¥ –ø–æ—Ç–æ—á–Ω—ñ</strong> –∑–Ω–∏–∂–∫–∏ —É –ø–∞–∫–µ—Ç–∞—Ö.
              </p>
            </div>

            <div className="promo__list">
              <div className="tier">
                <div className="tier__name">16 —É—Ä–æ–∫—ñ–≤</div>
                <div className="tier__save">–ï–∫–æ–Ω–æ–º—ñ—è 1600 –≥—Ä–Ω</div>
                <div className="tier__price"><s>500 –≥—Ä–Ω</s><span>400 –≥—Ä–Ω</span></div>
              </div>
              <div className="tier">
                <div className="tier__name">24 —É—Ä–æ–∫–∏</div>
                <div className="tier__save">–ï–∫–æ–Ω–æ–º—ñ—è 3000 –≥—Ä–Ω</div>
                <div className="tier__price"><s>500 –≥—Ä–Ω</s><span>375 –≥—Ä–Ω</span></div>
              </div>
              <div className="tier">
                <div className="tier__name">48 —É—Ä–æ–∫—ñ–≤</div>
                <div className="tier__save">–ï–∫–æ–Ω–æ–º—ñ—è 7 680 –≥—Ä–Ω</div>
                <div className="tier__price"><s>500 –≥—Ä–Ω</s><span>340 –≥—Ä–Ω</span></div>
              </div>
              <div className="tier">
                <div className="tier__name">72 —É—Ä–æ–∫–∏</div>
                <div className="tier__save">–ï–∫–æ–Ω–æ–º—ñ—è 12 960 –≥—Ä–Ω</div>
                <div className="tier__price"><s>500 –≥—Ä–Ω</s><span>320 –≥—Ä–Ω</span></div>
              </div>
            </div>

            <div className="promo__foot">
              <div className="promo__note">
                –©–æ–± –∑–∞—Ñ—ñ–∫—Å—É–≤–∞—Ç–∏ —Ü—ñ–Ω—É, –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–±–Ω–∏–π –¥–æ <strong>20.10</strong> ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –ø—ñ–¥–∫–∞–∂–µ –¥–µ—Ç–∞–ª—ñ.
              </div>
              <a href="#contact-form" className="btn btn-cta promo__cta" onClick={scrollToForm}>
                –•–æ—á—É —Ü—ñ–Ω—É –ø–æ –∞–∫—Ü—ñ—ó
              </a>
            </div>
          </aside>

          {/* ===== FORM (–∫–æ—Ä–æ—Ç–∫–∞) ===== */}
          <form id="contact-form" ref={formRef} className="form card" onSubmit={onSubmit} noValidate>
            <div className="form__row">
              <label className="field">
                <span className="field__label">–Ü–º‚Äô—è *</span>
                <span className="input-wrap">
                  <IconUser />
                  <input
                    className="field__input"
                    name="name"
                    value={form.name}
                    onChange={onChange}
                    placeholder="–í–∞—à–µ —ñ–º‚Äô—è"
                    autoComplete="name"
                    required
                  />
                </span>
              </label>

              <label className="field">
                <span className="field__label">–¢–µ–ª–µ—Ñ–æ–Ω</span>
                <span className="input-wrap">
                  <IconPhone />
                  <input
                    className="field__input"
                    name="phone"
                    value={form.phone}
                    onChange={onChange}
                    placeholder="+380 00 000 00 00"
                    autoComplete="tel"
                    inputMode="tel"
                  />
                </span>
              </label>
            </div>

            <label className="field">
              <span className="field__label">–ö–æ–Ω—Ç–∞–∫—Ç (Telegram –∞–±–æ email)</span>
              <span className="input-wrap">
                <IconAt />
                <input
                  className="field__input"
                  name="contact"
                  value={form.contact}
                  onChange={onChange}
                  placeholder="@username –∞–±–æ name@example.com"
                  autoComplete="off"
                />
              </span>
            </label>

            <div className="form__footer">
              <div className="form__note">–ù–∞—Ç–∏—Å–∫–∞—é—á–∏ ¬´–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å¬ª, –≤–∏ –ø–æ–≥–æ–¥–∂—É—î—Ç–µ—Å—å —ñ–∑ —É–º–æ–≤–∞–º–∏ –æ–±—Ä–æ–±–∫–∏ –¥–∞–Ω–∏—Ö.</div>
              <button className="btn btn-cta" type="submit" disabled={sending}>
                {sending ? "–ù–∞–¥—Å–∏–ª–∞—î–º–æ..." : "üìÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø—Ä–æ–±–Ω–∏–π —É—Ä–æ–∫"}
              </button>
            </div>

            <p
              className={result?.ok ? "form__success" : result ? "form__error" : "sr-only"}
              role="status" aria-live="polite"
            >
              {result?.ok ? "–î—è–∫—É—î–º–æ! –ó–∞—è–≤–∫—É –æ—Ç—Ä–∏–º–∞–Ω–æ ‚Äî –º–∏ –∑–≤ º—è–∂–µ–º–æ—Å—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º."
                          : result ? `–ü–æ–º–∏–ª–∫–∞: ${result.error}` : ""}
            </p>
          </form>
        </div>
      </div>
    </section>
  );
}
