# app/core/bootstrap_admin.py
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from passlib.hash import bcrypt

from app.core.config import settings
from app.models.admin_user import AdminUser, AdminRole

# ‚Üì‚Üì‚Üì –¥–æ–¥–∞–π —Ü—ñ –Ü–ú–ü–û–†–¢–ò ‚Üì‚Üì‚Üì
from datetime import datetime
from app.models.package import Package, Type as PackageType, Audience as PackageAudience
# ‚Üë‚Üë‚Üë –¥–æ–¥–∞–π —Ü—ñ –Ü–ú–ü–û–†–¢–ò ‚Üë‚Üë‚Üë


async def ensure_owner_admin(session: AsyncSession) -> dict:
    """
    –°—Ç–≤–æ—Ä—é—î OWNER-–∞–¥–º—ñ–Ω–∞, —è–∫—â–æ –≤ —Å–∏—Å—Ç–µ–º—ñ —â–µ –Ω—ñ–∫–æ–≥–æ –Ω–µ–º–∞—î.
    –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –≤–∂–µ —î ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–æ–±–∏–º–æ.
    –ü–æ–≤–µ—Ä—Ç–∞—î {"created": bool, "email": str}.
    """
    result = await session.execute(select(AdminUser).limit(1))
    existing = result.scalar_one_or_none()
    if existing:
        return {"created": False, "email": existing.email}

    email = settings.admin_email.strip().lower()
    password = settings.admin_password

    admin = AdminUser(
        email=email,
        password_hash=bcrypt.hash(password),
        role=AdminRole.OWNER,
        is_active=True,
    )
    session.add(admin)
    await session.commit()
    return {"created": True, "email": email}


# ‚Üì‚Üì‚Üì –î–û–î–ê–ô –ù–û–í–£ –§–£–ù–ö–¶–Ü–Æ –î–õ–Ø –°–¢–ê–ù–î–ê–†–¢–ù–ò–• –ü–ê–ö–ï–¢–Ü–í (ADULTS) ‚Üì‚Üì‚Üì
async def ensure_default_packages(session: AsyncSession) -> dict:
    """
    –Ü–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ —Å—Ç–≤–æ—Ä—é—î —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏ –¥–ª—è –¥–æ—Ä–æ—Å–ª–∏—Ö (STANDARD / ADULTS),
    —è–∫—â–æ —ó—Ö —â–µ –Ω–µ–º–∞—î. –û–±—á–∏—Å–ª—é—î –∑–Ω–∏–∂–∫–∏ –≤ –≥—Ä–æ—à–∞—Ö —ñ –≤—ñ–¥—Å–æ—Ç–∫–∞—Ö.
    """
    # –î–∞–Ω—ñ –≤—ñ–¥ —Ç–µ–±–µ (–≤ –≥—Ä–∏–≤–Ω—è—Ö), —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å 50 —Ö–≤ –≤—Å—é–¥–∏
    items = [
        {
            "slug": "standard-adults-6",
            "name": "Standard ‚Äî Adults (6 lessons)",
            "lessons_count": 6,
            "price_per_lesson": 500,
            "total_price": 3000,
            "not_true_price": 3500,
        },
        {
            "slug": "standard-adults-16",
            "name": "Standard ‚Äî Adults (16 lessons)",
            "lessons_count": 16,
            "price_per_lesson": 430,
            "total_price": 6880,
            "not_true_price": 7200,
        },
        {
            "slug": "standard-adults-24",
            "name": "Standard ‚Äî Adults (24 lessons)",
            "lessons_count": 24,
            "price_per_lesson": 400,
            "total_price": 9600,
            "not_true_price": 10000,
        },
        {
            "slug": "standard-adults-48",
            "name": "Standard ‚Äî Adults (48 lessons)",
            "lessons_count": 48,
            "price_per_lesson": 350,
            "total_price": 16800,
            "not_true_price": 17500,
        },
    ]

    created = []
    for it in items:
        # –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∑–∞ slug
        existing_q = await session.execute(
            select(Package).where(Package.slug == it["slug"])
        )
        existing = existing_q.scalar_one_or_none()
        if existing:
            continue

        # –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–Ω–∏–∂–æ–∫
        not_true = it["not_true_price"]
        total = it["total_price"]
        disc_money = max(not_true - total, 0)
        # –æ–∫—Ä—É–≥–ª—è—î–º–æ –¥–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ —Ü—ñ–ª–æ–≥–æ
        disc_percent = round((disc_money / not_true) * 100) if not_true else None

        # –û–ü–ò–°–ò (–∫–æ—Ä–æ—Ç–∫–∏–π + –¥–æ–≤–≥–∏–π)
        short_description = (
            "50-—Ö–≤–∏–ª–∏–Ω–Ω—ñ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è –∑ —á—ñ—Ç–∫–∏–º —Ñ–æ–∫—É—Å–æ–º –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç."
        )
        long_description = (
            "–ì–æ—Ç–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è + —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω—ñ –ø—ñ–¥ –≤–∞—à—ñ —Å–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è —ñ —Ü—ñ–ª—ñ. "
            "–î–æ–¥–∞—Ç–∫–æ–≤—ñ –¥–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è (–ø–æ–∑–∞—É—Ä–æ—á–Ω—ñ) –Ω–∞ –≤—Å—ñ –∫–æ–Ω—Ç—Ä–æ–ª—ñ –∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—ó: "
            "Reading, Grammar, Vocabulary, Listening, Speaking. "
            "–°–ø–∏—Å–∫–∏ —Å–ª—ñ–≤ –ø—ñ–¥ —Ç–µ–º–∏ —Ç–∞ –≤–∞—à—ñ –∂–∏—Ç—Ç—î–≤—ñ –∑–∞–¥–∞—á—ñ (—Ä–æ–±–æ—Ç–∞, –ø–æ–¥–æ—Ä–æ–∂—ñ, —ñ–Ω—Ç–µ—Ä–≤‚Äô—é). "
            "–ü—Ä–æ–∑–æ—Ä–∏–π –ø—Ä–æ–≥—Ä–µ—Å —ñ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ —É—Ä–æ–∫–∞–º–∏ ‚Äî –∫—Ä–∞—Å–∞ –π –ø–æ—Ä—è–¥–æ–∫ üß†‚ú®"
        )

        pkg = Package(
            slug=it["slug"],
            name=it["name"],
            type=PackageType.STANDARD,
            audience=PackageAudience.ADULTS,
            short_description=short_description,
            long_description=long_description,
            lesson_duration="50",
            lessons_count=it["lessons_count"],
            currency="UAH",
            not_true_price=not_true,
            price_per_lesson=it["price_per_lesson"],
            base_price=None,  # –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ
            discount_percent=disc_percent,
            discount_money=disc_money,
            total_price=total,
            is_active=True,
            created_at=datetime.utcnow(),
            updated_at=datetime.utcnow(),
        )
        session.add(pkg)
        created.append(it["slug"])

    if created:
        await session.commit()

    return {"created_slugs": created}
# ‚Üë‚Üë‚Üë –ö–Ü–ù–ï–¶–¨ –ù–û–í–û–á –§–£–ù–ö–¶–Ü–á ‚Üë‚Üë‚Üë
